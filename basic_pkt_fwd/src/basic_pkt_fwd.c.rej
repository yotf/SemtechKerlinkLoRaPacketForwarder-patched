--- basic_pkt_fwd.c	2016-02-22 20:05:15.192481205 +0100
+++ basic_pkt_fwd.c	2016-02-22 20:47:39.536435640 +0100
@@ -192,6 +206,62 @@
 	return;
 }
 
+static int parse_logging_configuration(const char * conf_file){
+    const char conf_obj_name[] = "logging_conf";
+	JSON_Value *root_val;
+	JSON_Object *conf_obj = NULL;
+	JSON_Value *val = NULL; /* needed to detect the absence of some
+                             * fields */
+    int temp; /* for checking whether number is in needed range */
+
+
+    /* try to parse JSON */
+	root_val = json_parse_file_with_comments(conf_file);
+	if (root_val == NULL) {
+		LOG(LOG_ERR,"%s is not a valid JSON file\n", conf_file);
+		exit(EXIT_FAILURE);
+	}
+	
+	/* point to the logging configuration object */
+	conf_obj = json_object_get_object(json_value_get_object(root_val), conf_obj_name);
+	if (conf_obj == NULL) {
+		LOG(LOG_DEBUG,"%s does not contain a JSON object named %s\n", conf_file, conf_obj_name);
+		return -1;
+	} else {
+		LOG(LOG_DEBUG,"%s does contain a JSON object named %s, parsing gateway parameters\n", conf_file, conf_obj_name);
+	}
+
+
+    val = json_object_get_value(conf_obj, "logging_level");
+    if(val!=NULL && json_value_get_type(val) == JSONNumber ){
+            temp = (uint8_t)json_value_get_number(val);
+            if(temp<0 || temp>7 ) {
+                    LOG(LOG_WARNING, "The logging level should be between 0-7, please check");
+            } else{
+                    logging_level=temp;
+            }
+    }
+    LOG(LOG_DEBUG, "the logging level is set to %s", logging_names[logging_level]);
+
+    val = json_object_get_value(conf_obj, "stdout");
+    if(val!=NULL && json_value_get_type(val) == JSONBoolean ){
+            use_printf = (bool)json_value_get_boolean(val);
+    }
+    LOG(LOG_DEBUG, "the output will%s be printed to stdout", (use_printf?"":" NOT"));
+
+    val = json_object_get_value(conf_obj, "syslog");
+    if(val!=NULL && json_value_get_type(val) == JSONBoolean ){
+            use_syslog = (bool)json_value_get_boolean(val);
+    }
+    LOG(LOG_DEBUG, "the output will%s be sent to syslog", (use_syslog?"":" NOT"));
+
+    json_value_free(root_val);
+	return 0;
+
+    
+        
+}
+
 static int parse_SX1301_configuration(const char * conf_file) {
 	int i;
 	char param_name[32]; /* used to generate variable parameter names */
@@ -228,20 +298,20 @@
 	if (json_value_get_type(val) == JSONBoolean) {
 		boardconf.lorawan_public = (bool)json_value_get_boolean(val);
 	} else {
-		MSG("WARNING: Data type for lorawan_public seems wrong, please check\n");
+		LOG(LOG_WARNING,"Data type for lorawan_public seems wrong, please check\n");
 		boardconf.lorawan_public = false;
 	}
 	val = json_object_get_value(conf_obj, "clksrc"); /* fetch value (if possible) */
 	if (json_value_get_type(val) == JSONNumber) {
 		boardconf.clksrc = (uint8_t)json_value_get_number(val);
 	} else {
-		MSG("WARNING: Data type for clksrc seems wrong, please check\n");
+		LOG(LOG_WARNING,"Data type for clksrc seems wrong, please check\n");
 		boardconf.clksrc = 0;
 	}
-	MSG("INFO: lorawan_public %d, clksrc %d\n", boardconf.lorawan_public, boardconf.clksrc);
+	LOG(LOG_DEBUG,"lorawan_public %d, clksrc %d\n", boardconf.lorawan_public, boardconf.clksrc);
 	/* all parameters parsed, submitting configuration to the HAL */
         if (lgw_board_setconf(boardconf) != LGW_HAL_SUCCESS) {
-                MSG("WARNING: Failed to configure board\n");
+                LOG(LOG_WARNING,"Failed to configure board\n");
 	}
 
 	/* set configuration for tx gains */
@@ -250,7 +320,7 @@
 		snprintf(param_name, sizeof param_name, "tx_lut_%i", i); /* compose parameter path inside JSON structure */
 		val = json_object_get_value(conf_obj, param_name); /* fetch value (if possible) */
 		if (json_value_get_type(val) != JSONObject) {
-			MSG("INFO: no configuration for tx gain lut %i\n", i);
+			LOG(LOG_DEBUG,"no configuration for tx gain lut %i\n", i);
 			continue;
 		}
 		txlut.size++; /* update TX LUT size based on JSON object found in configuration file */
@@ -260,7 +330,7 @@
 		if (json_value_get_type(val) == JSONNumber) {
 			txlut.lut[i].pa_gain = (uint8_t)json_value_get_number(val);
 		} else {
-			MSG("WARNING: Data type for %s[%d] seems wrong, please check\n", param_name, i);
+			LOG(LOG_WARNING,"Data type for %s[%d] seems wrong, please check\n", param_name, i);
 			txlut.lut[i].pa_gain = 0;
 		}
                 snprintf(param_name, sizeof param_name, "tx_lut_%i.dac_gain", i);
@@ -275,7 +345,7 @@
                 if (json_value_get_type(val) == JSONNumber) {
                         txlut.lut[i].dig_gain = (uint8_t)json_value_get_number(val);
                 } else {
-			MSG("WARNING: Data type for %s[%d] seems wrong, please check\n", param_name, i);
+			LOG(LOG_WARNING,"Data type for %s[%d] seems wrong, please check\n", param_name, i);
                         txlut.lut[i].dig_gain = 0;
                 }
                 snprintf(param_name, sizeof param_name, "tx_lut_%i.mix_gain", i);
@@ -283,7 +353,7 @@
                 if (json_value_get_type(val) == JSONNumber) {
                         txlut.lut[i].mix_gain = (uint8_t)json_value_get_number(val);
                 } else {
-			MSG("WARNING: Data type for %s[%d] seems wrong, please check\n", param_name, i);
+			LOG(LOG_WARNING,"Data type for %s[%d] seems wrong, please check\n", param_name, i);
                         txlut.lut[i].mix_gain = 0;
                 }
                 snprintf(param_name, sizeof param_name, "tx_lut_%i.rf_power", i);
@@ -291,14 +361,14 @@
                 if (json_value_get_type(val) == JSONNumber) {
                         txlut.lut[i].rf_power = (int8_t)json_value_get_number(val);
                 } else {
-			MSG("WARNING: Data type for %s[%d] seems wrong, please check\n", param_name, i);
+			LOG(LOG_WARNING,"Data type for %s[%d] seems wrong, please check\n", param_name, i);
                         txlut.lut[i].rf_power = 0;
                 }
 	}
 	/* all parameters parsed, submitting configuration to the HAL */
-	MSG("INFO: Configuring TX LUT with %u indexes\n", txlut.size);
+	LOG(LOG_DEBUG,"Configuring TX LUT with %u indexes\n", txlut.size);
         if (lgw_txgain_setconf(&txlut) != LGW_HAL_SUCCESS) {
-                MSG("WARNING: Failed to configure concentrator TX Gain LUT\n");
+                LOG(LOG_WARNING,"Failed to configure concentrator TX Gain LUT\n");
 	}
 
 	/* set configuration for RF chains */
@@ -332,7 +402,7 @@
 			} else if (!strncmp(str, "SX1257", 6)) {
 				rfconf.type = LGW_RADIO_TYPE_SX1257;
 			} else {
-				MSG("WARNING: invalid radio type: %s (should be SX1255 or SX1257)\n", str);
+				LOG(LOG_WARNING,"invalid radio type: %s (should be SX1255 or SX1257)\n", str);
 			}
 			snprintf(param_name, sizeof param_name, "radio_%i.tx_enable", i);
 			val = json_object_dotget_value(conf_obj, param_name);
@@ -341,11 +411,11 @@
 			} else {
 				rfconf.tx_enable = false;
 			}
-			MSG("INFO: radio %i enabled (type %s), center frequency %u, RSSI offset %f, tx enabled %d\n", i, str, rfconf.freq_hz, rfconf.rssi_offset, rfconf.tx_enable);
+			LOG(LOG_DEBUG,"radio %i enabled (type %s), center frequency %u, RSSI offset %f, tx enabled %d\n", i, str, rfconf.freq_hz, rfconf.rssi_offset, rfconf.tx_enable);
 		}
 		/* all parameters parsed, submitting configuration to the HAL */
 		if (lgw_rxrf_setconf(i, rfconf) != LGW_HAL_SUCCESS) {
-			MSG("WARNING: invalid configuration for radio %i\n", i);
+			LOG(LOG_WARNING,"invalid configuration for radio %i\n", i);
 		}
 	}
 	
@@ -458,10 +528,10 @@
 			else if (bw <= 500000) ifconf.bandwidth = BW_500KHZ;
 			else ifconf.bandwidth = BW_UNDEFINED;
 			
-			MSG("INFO: FSK channel> radio %i, IF %i Hz, %u Hz bw, %u bps datarate\n", ifconf.rf_chain, ifconf.freq_hz, bw, ifconf.datarate);
+			LOG(LOG_NOTICE,"FSK channel> radio %i, IF %i Hz, %u Hz bw, %u bps datarate\n", ifconf.rf_chain, ifconf.freq_hz, bw, ifconf.datarate);
 		}
 		if (lgw_rxif_setconf(9, ifconf) != LGW_HAL_SUCCESS) {
-			MSG("WARNING: invalid configuration for FSK channel\n");
+			LOG(LOG_WARNING,"invalid configuration for FSK channel\n");
 		}
 	}
 	json_value_free(root_val);
@@ -545,24 +615,25 @@
 	if (json_value_get_type(val) == JSONBoolean) {
 		fwd_valid_pkt = (bool)json_value_get_boolean(val);
 	}
-	MSG("INFO: packets received with a valid CRC will%s be forwarded\n", (fwd_valid_pkt ? "" : " NOT"));
+	LOG(LOG_DEBUG,"packets received with a valid CRC will%s be forwarded\n", (fwd_valid_pkt ? "" : " NOT"));
 	val = json_object_get_value(conf_obj, "forward_crc_error");
 	if (json_value_get_type(val) == JSONBoolean) {
 		fwd_error_pkt = (bool)json_value_get_boolean(val);
 	}
-	MSG("INFO: packets received with a CRC error will%s be forwarded\n", (fwd_error_pkt ? "" : " NOT"));
+	LOG(LOG_DEBUG,"packets received with a CRC error will%s be forwarded\n", (fwd_error_pkt ? "" : " NOT"));
 	val = json_object_get_value(conf_obj, "forward_crc_disabled");
 	if (json_value_get_type(val) == JSONBoolean) {
 		fwd_nocrc_pkt = (bool)json_value_get_boolean(val);
 	}
-	MSG("INFO: packets received with no CRC will%s be forwarded\n", (fwd_nocrc_pkt ? "" : " NOT"));
+	LOG(LOG_DEBUG,"packets received with no CRC will%s be forwarded\n", (fwd_nocrc_pkt ? "" : " NOT"));
 	
 	/* Auto-quit threshold (optional) */
 	val = json_object_get_value(conf_obj, "autoquit_threshold");
 	if (val != NULL) {
 		autoquit_threshold = (uint32_t)json_value_get_number(val);
-		MSG("INFO: Auto-quit after %u non-acknowledged PULL_DATA\n", autoquit_threshold);
+		LOG(LOG_DEBUG,"Auto-quit after %u non-acknowledged PULL_DATA\n", autoquit_threshold);
 	}
+    
 	
 	/* free JSON parsing data structure */
 	json_value_free(root_val);
@@ -1183,11 +1289,11 @@
 				if (j > 0) {
 					buff_index += j;
 				} else {
-					MSG("ERROR: [up] snprintf failed line %u\n", (__LINE__ - 4));
+					LOG(LOG_ERR,"[up] snprintf failed line %u\n", (__LINE__ - 4));
 					exit(EXIT_FAILURE);
 				}
 			} else {
-				MSG("ERROR: [up] received packet with unknown modulation\n");
+				LOG(LOG_ERR,"[up] received packet with unknown modulation\n");
 				exit(EXIT_FAILURE);
 			}
 			
@@ -1233,8 +1339,10 @@
 		++buff_index;
 		buff_up[buff_index] = 0; /* add string terminator, for safety */
 		
-		printf("\nJSON up: %s\n", (char *)(buff_up + 12)); /* DEBUG: display JSON payload */
-		
+		// printf("\nJSON up: %s\n", (char *)(buff_up + 12)); /*
+		// DEBUG: display JSON payload */
+        dump_packet(p,buff_up,12); //header size (before json) is 12
+        
 		/* send datagram to server */
 		send(sock_up, (void *)buff_up, buff_index, 0);
 		clock_gettime(CLOCK_MONOTONIC, &send_time);
@@ -1253,20 +1361,20 @@
 					break;
 				}
 			} else if ((j < 4) || (buff_ack[0] != PROTOCOL_VERSION) || (buff_ack[3] != PKT_PUSH_ACK)) {
-				//MSG("WARNING: [up] ignored invalid non-ACL packet\n");
+				//LOG(LOG_WARNING,"[up] ignored invalid non-ACL packet\n");
 				continue;
 			} else if ((buff_ack[1] != token_h) || (buff_ack[2] != token_l)) {
-				//MSG("WARNING: [up] ignored out-of sync ACK packet\n");
+				//LOG(LOG_WARNING,"[up] ignored out-of sync ACK packet\n");
 				continue;
 			} else {
-				MSG("INFO: [up] PUSH_ACK received in %i ms\n", (int)(1000 * difftimespec(recv_time, send_time)));
+				LOG(LOG_DEBUG,"[up] PUSH_ACK received in %i ms\n",	(int)(1000 * difftimespec(recv_time, send_time)));
 				meas_up_ack_rcv += 1;
 				break;
 			}
 		}
 		pthread_mutex_unlock(&mx_meas_up);
 	}
-	MSG("\nINFO: End of upstream thread\n");
+	LOG(LOG_DEBUG,"End of upstream thread\n");
 }
 
 /* -------------------------------------------------------------------------- */
@@ -1321,7 +1429,7 @@
 		/* auto-quit if the threshold is crossed */
 		if ((autoquit_threshold > 0) && (autoquit_cnt >= autoquit_threshold)) {
 			exit_sig = true;
-			MSG("INFO: [down] the last %u PULL_DATA were not ACKed, exiting application\n", autoquit_threshold);
+			LOG(LOG_INFO,"[down] the last %u PULL_DATA were not ACKed, exiting application\n", autoquit_threshold);
 			break;
 		}
 		
@@ -1364,38 +1472,41 @@
 			if (buff_down[3] == PKT_PULL_ACK) {
 				if ((buff_down[1] == token_h) && (buff_down[2] == token_l)) {
 					if (req_ack) {
-						MSG("INFO: [down] duplicate ACK received :)\n");
+						LOG(LOG_DEBUG,"[down] duplicate ACK received :)\n");
 					} else { /* if that packet was not already acknowledged */
 						req_ack = true;
 						autoquit_cnt = 0;
 						pthread_mutex_lock(&mx_meas_dw);
 						meas_dw_ack_rcv += 1;
 						pthread_mutex_unlock(&mx_meas_dw);
-						MSG("INFO: [down] PULL_ACK received in %i ms\n", (int)(1000 * difftimespec(recv_time, send_time)));
+						LOG(LOG_DEBUG,"[down] PULL_ACK received in %i ms\n", (int)(1000 * difftimespec(recv_time, send_time)));
 					}
 				} else { /* out-of-sync token */
-					MSG("INFO: [down] received out-of-sync ACK\n");
+					LOG(LOG_DEBUG,"[down] received out-of-sync ACK\n");
 				}
 				continue;
 			}
 			
 			/* the datagram is a PULL_RESP */
 			buff_down[msg_len] = 0; /* add string terminator, just to be safe */
-			MSG("INFO: [down] PULL_RESP received :)\n"); /* very verbose */
-			// printf("\nJSON down: %s\n", (char *)(buff_down + 4)); /* DEBUG: display JSON payload */
-			
+			LOG(LOG_DEBUG,"[down] PULL_RESP received :)\n"); /* very verbose */
+			// printf("\nJSON down: %s\n", (char *)(buff_down + 4));
+			// /* DEBUG: display JSON payload */
+          
+			dump_json(buff_down,4); // header size (before json
+                                    // starts) is 4
 			/* initialize TX struct and try to parse JSON */
 			memset(&txpkt, 0, sizeof txpkt);
 			root_val = json_parse_string_with_comments((const char *)(buff_down + 4)); /* JSON offset */
 			if (root_val == NULL) {
-				MSG("WARNING: [down] invalid JSON, TX aborted\n");
+				LOG(LOG_WARNING,"[down] invalid JSON, TX aborted\n");
 				continue;
 			}
 			
 			/* look for JSON sub-object 'txpk' */
 			txpk_obj = json_object_get_object(json_value_get_object(root_val), "txpk");
 			if (txpk_obj == NULL) {
-				MSG("WARNING: [down] no \"txpk\" object in JSON, TX aborted\n");
+				LOG(LOG_WARNING,"[down] no \"txpk\" object in JSON, TX aborted\n");
 				json_value_free(root_val);
 				continue;
 			}
@@ -1541,7 +1652,7 @@
 				/* parse FSK bitrate (mandatory) */
 				val = json_object_get_value(txpk_obj,"datr");
 				if (val == NULL) {
-					MSG("WARNING: [down] no mandatory \"txpk.datr\" object in JSON, TX aborted\n");
+					LOG(LOG_WARNING,"[down] no mandatory \"txpk.datr\" object in JSON, TX aborted\n");
 					json_value_free(root_val);
 					continue;
 				}
@@ -1550,7 +1661,7 @@
 				/* parse frequency deviation (mandatory) */
 				val = json_object_get_value(txpk_obj,"fdev");
 				if (val == NULL) {
-					MSG("WARNING: [down] no mandatory \"txpk.fdev\" object in JSON, TX aborted\n");
+					LOG(LOG_WARNING,"[down] no mandatory \"txpk.fdev\" object in JSON, TX aborted\n");
 					json_value_free(root_val);
 					continue;
 				}
